load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

COMMON_CXX_WARNINGS = [
    "-Werror",
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wconversion",
    "-Wnon-virtual-dtor",
    "-Wold-style-cast",
    "-Wcast-align",
    "-Wunused",
    "-Woverloaded-virtual",
    "-Wmisleading-indentation",
    "-Wnull-dereference",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wimplicit-fallthrough",
]

# Bazel sends stdout/stderr to file so we cannot use `-fdiagnostics-color=auto`

# https://github.com/bazelbuild/bazel/issues/6046#issuecomment-626941725
#
# Clang will also require libtinfo.so.5 with `-fdiagnostics-color=always`
# https://github.com/mun-lang/mun/issues/191#issuecomment-753402659
# https://reviews.llvm.org/D42274
load("//tools:host_system_libraries.bzl", "host_system_libraries")

host_system_libraries(
    name = "host_system_libraries",
    find = [
        "libi2c.so.0",
        "libtinfo.so.5",
    ],
)

load("@host_system_libraries//:defs.bzl", "HOST_SYSTEM_LIBRARIES")

new_local_repository(
    name = "linux_x86-64_usr_i2c",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "i2c",
    srcs = ["lib/x86_64-linux-gnu/libi2c.so"],
)

cc_library(
    name = "linux_x86-64_usr_i2c",
    hdrs = ["include/i2c/smbus.h"],
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [":i2c"],
)
""",
    path = "/usr",
)

# Note: not correct on MacOS.
LLVM_COLOR_FLAGS = ["-fdiagnostics-color=always" if "libinfo.so.5" in HOST_SYSTEM_LIBRARIES else ""]

BAZEL_BOOTLIN_COMMIT = "eae108c14445074ab5c8ae7f5338eebf1873ae69"

http_archive(
    name = "bazel_bootlin",
    sha256 = "ea76bcd8fc27da13bc79acc4844baadc563e07888a128265ca74d07cd58c1f34",
    strip_prefix = "bazel_bootlin-%s" % BAZEL_BOOTLIN_COMMIT,
    url = "https://github.com/oliverlee/bazel_bootlin/archive/%s.tar.gz" % BAZEL_BOOTLIN_COMMIT,
)

load("@bazel_bootlin//:defs.bzl", "bootlin_toolchain")

# for mapping from buildroot version to gcc version
# see https://toolchains.bootlin.com/releases_x86-64.html
bootlin_toolchain(
    name = "gcc_12_toolchain",
    architecture = "x86-64",
    buildroot_version = "bleeding-edge-2022.08-1",
    extra_cxx_flags = [
        "-fdiagnostics-color=always",
        "-std=c++23",
        "-Wduplicated-cond",
        "-Wduplicated-branches",
        "-Wlogical-op",
        "-Wuseless-cast",
        "-Wshadow=compatible-local",  # Equivalent to -Wshadow on llvm. GCC default is stupid.
    ] + COMMON_CXX_WARNINGS,
    libc_impl = "glibc",
)

BAZEL_TOOLCHAIN_VERSION = "c65ef7a45907016a754e5bf5bfabac76eb702fd3"

http_archive(
    name = "bazel_toolchain",
    sha256 = "c70777b0aa877085323aa1ced3b6e011811a9800092e837043aa5f678d838301",
    strip_prefix = "bazel-toolchain-%s" % BAZEL_TOOLCHAIN_VERSION,
    url = "https://github.com/grailbio/bazel-toolchain/archive/%s.tar.gz" % BAZEL_TOOLCHAIN_VERSION,
)

load("//tools:llvm_toolchain_dependencies.bzl", "llvm_toolchain_dependencies")

llvm_toolchain_dependencies()

load("//tools:llvm_toolchain.bzl", "llvm_toolchain")

llvm_toolchain(
    name = "llvm_16_toolchain",
    cxx_flags = {
        "": [
            "-stdlib=libc++",
            "-std=c++2b",
            "-Wshadow",
        ] + COMMON_CXX_WARNINGS + LLVM_COLOR_FLAGS,
    },
    # Link UBSan C++ runtime libraries if the `ubsan` feature is enabled
    # https://github.com/bazelbuild/bazel/issues/12797#issuecomment-980641064
    # use `link_libs` to prevent overriding default `link_flags`
    # https://github.com/grailbio/bazel-toolchain/blob/ceeedcc4464322e05fe5b8df3749cc02273ee083/toolchain/cc_toolchain_config.bzl#L148-L150
    link_libs = {
        "": ["-fsanitize-link-c++-runtime"],
    },
    linux_x86_64_sysroot = "@gcc_12_toolchain_files//x86_64-buildroot-linux-gnu/sysroot",
    llvm_versions = {
        "": "16.0.4",
        "linux-aarch64": "16.0.3",
    },
)

# register llvm first, it has better error messages
load("@llvm_16_toolchain//:toolchains.bzl", "llvm_register_toolchains")

llvm_register_toolchains()

register_toolchains(
    "@gcc_12_toolchain//:toolchain",
)

ASIO_VERSION = "d6b95c0188e0359a8cdbdb6571f0cbacf11a538c"

http_archive(
    name = "asio",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "asio",
    hdrs = glob(["asio/include/**"]),
    includes = ["asio/include"],
    defines = [
    ],
    visibility = ["//visibility:public"],
)
""",
    sha256 = "c4eae0910b8fcf2df8d32dc0ab67b032e9876491a5968faad32d330fd41e119c",
    strip_prefix = "asio-%s" % ASIO_VERSION,
    url = "https://github.com/chriskohlhoff/asio/archive/%s.tar.gz" % ASIO_VERSION,
)

FMT_VERSION = "dd5a9691f992f7f257243cbecb516a4ab584dcde"

http_archive(
    name = "fmt",
    patch_cmds = [
        "mv support/bazel/.bazelversion .bazelversion",
        "mv support/bazel/BUILD.bazel BUILD.bazel",
        "mv support/bazel/WORKSPACE.bazel WORKSPACE.bazel",
    ],
    sha256 = "02289e247321e4984fcfc185e1bcaf6ace9622ad6e034f326677da4b53c7a92d",
    strip_prefix = "fmt-%s" % FMT_VERSION,
    url = "https://github.com/fmtlib/fmt/archive/%s.tar.gz" % FMT_VERSION,
)

MDSPAN_VERSION = "9d0a451e11177cbdeaef035c7914b0aa73ddd1e2"

http_archive(
    name = "mdspan",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "mdspan",
    hdrs = glob(["include/**"]),
    includes = ["include"],
    defines = [
        "MDSPAN_USE_BRACKET_OPERATOR=1",
        "MDSPAN_USE_PAREN_OPERATOR=1", # needed by stdBLAS
    ],
    visibility = ["//visibility:public"],
)
""",
    sha256 = "d7751653cd93f3e73118796fd5f42f0424ef20ffeaa224005b4008b8987e6d81",
    strip_prefix = "mdspan-%s" % MDSPAN_VERSION,
    url = "https://github.com/kokkos/mdspan/archive/%s.tar.gz" % MDSPAN_VERSION,
)

LINALG_VERSION = "d1a1a116a1a62a03d726d70220e573aa7c3dba68"

http_archive(
    name = "linalg",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

# It appears this can be empty if we don't use atomic ref, blas, or kokkos
# https://github.com/kokkos/stdBLAS/blob/main/include/experimental/__p1673_bits/linalg_config.h.in
genrule(
    name = "linalg_config",
    outs = ["include/experimental/__p1673_bits/linalg_config.h"],
    cmd = "touch $@",
)

cc_library(
    name = "linalg",
    srcs = ["linalg_config"],
    hdrs = glob(["include/**"]),
    includes = [
        "include",
        "include/experimental",
    ],
    deps = ["@mdspan"],
    visibility = ["//visibility:public"],
)
""",
    sha256 = "2cff70d080186949dcfa6da509eab41c3ba25df23c15bcbca8d810d0a1370bdb",
    strip_prefix = "stdBLAS-%s" % LINALG_VERSION,
    url = "https://github.com/kokkos/stdblas/archive/%s.tar.gz" % LINALG_VERSION,
)

GSL_LITE_VERSION = "a8c7e5bbbd08841836f9b92d72747fb8769dbec4"

http_archive(
    name = "gsl_lite",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "gsl_lite",
    hdrs = ["include/gsl/gsl-lite.hpp"],
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    sha256 = "f9edeec2b517dbb57c5688150db56c90f5c4922ef8aa8d15cfe532fa42058792",
    strip_prefix = "gsl-lite-%s" % GSL_LITE_VERSION,
    url = "https://github.com/gsl-lite/gsl-lite/archive/%s.tar.gz" % GSL_LITE_VERSION,
)

MP_UNITS_VERSION = "60a564a86700804e306f0d73a1521ea6e4abe377"

http_archive(
    name = "mp_units",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "mp_units",
    hdrs = glob(["src/**"]),
    includes = [
        "src/core-fmt/include",
        "src/core-io/include",
        "src/core/include",
        "src/systems/angular/include",
        "src/systems/cgs/include",
        "src/systems/hep/include",
        "src/systems/iau/include",
        "src/systems/iec80000/include",
        "src/systems/imperial/include",
        "src/systems/international/include",
        "src/systems/isq/include",
        "src/systems/isq_angle/include",
        "src/systems/natural/include",
        "src/systems/si/include",
        "src/systems/typographic/include",
        "src/systems/usc/include",
        "src/utility/include",
    ],
    deps = [
        "@gsl_lite",
    ],
    visibility = ["//visibility:public"],
)
""",
    # Fix Clang builds by defining constructor as public
    # https://github.com/mpusz/mp-units/issues/473
    #
    patch_args = ["-p1"],
    patches = [
        "//third_party:mp-units-clang-priv-ctor.patch",
        "//third_party:mp-units-clang-type-identity.patch",
    ],
    sha256 = "2c48171815909da836300d50a40e396412cb4881794b4cb5d13dcef858c46da1",
    strip_prefix = "mp-units-%s" % MP_UNITS_VERSION,
    url = "https://github.com/mpusz/mp-units/archive/%s.tar.gz" % MP_UNITS_VERSION,
)

BOOST_UT_VERSION = "e53a47d37bc594e80bd5f1b8dc1ade8dce4429d3"

http_archive(
    name = "boost_ut",
    build_file_content = """
load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "boost_ut",
    hdrs = ["include/boost/ut.hpp"],
    includes = ["include"],
    visibility = ["//visibility:public"],
)
""",
    sha256 = "abc90fa389a47504d06a88a56ddc9e580cf2654173bd14d211db714bb111b923",
    strip_prefix = "ut-%s" % BOOST_UT_VERSION,
    url = "https://github.com/boost-ext/ut/archive/%s.tar.gz" % BOOST_UT_VERSION,
)

BAZEL_CLANG_FORMAT_VERSION = "0436f63ce242cc3682b4e8dc8455a4ff725b5c8f"

http_archive(
    name = "bazel_clang_format",
    sha256 = "604a32981039812f3c61f0212114c8bcc1f73289e5fc8c0c40ced1c9280e62d2",
    strip_prefix = "bazel_clang_format-%s" % BAZEL_CLANG_FORMAT_VERSION,
    url = "https://github.com/oliverlee/bazel_clang_format/archive/%s.tar.gz" % BAZEL_CLANG_FORMAT_VERSION,
)

BAZEL_CLANG_TIDY_VERSION = "7a77cacef6294e8df644c66c19190ed95d3d35cf"

http_archive(
    name = "bazel_clang_tidy",
    sha256 = "b4df2f62a839dfe991bfa22750afc7577ce76740aee44efb321ea4a79ecd5146",
    strip_prefix = "bazel_clang_tidy-%s" % BAZEL_CLANG_TIDY_VERSION,
    url = "https://github.com/oliverlee/bazel_clang_tidy/archive/%s.tar.gz" % BAZEL_CLANG_TIDY_VERSION,
)

http_archive(
    name = "buildifier_prebuilt",
    sha256 = "e46c16180bc49487bfd0f1ffa7345364718c57334fa0b5b67cb5f27eba10f309",
    strip_prefix = "buildifier-prebuilt-6.1.0",
    urls = [
        "https://github.com/keith/buildifier-prebuilt/archive/6.1.0.tar.gz",
    ],
)

load("@buildifier_prebuilt//:deps.bzl", "buildifier_prebuilt_deps")

buildifier_prebuilt_deps()

load("@buildifier_prebuilt//:defs.bzl", "buildifier_prebuilt_register_toolchains")

buildifier_prebuilt_register_toolchains()

COMPILE_COMMANDS_VERSION = "3dddf205a1f5cde20faf2444c1757abe0564ff4c"

http_archive(
    name = "hedron_compile_commands",
    sha256 = "3cd0e49f0f4a6d406c1d74b53b7616f5e24f5fd319eafc1bf8eee6e14124d115",
    strip_prefix = "bazel-compile-commands-extractor-%s" % COMPILE_COMMANDS_VERSION,
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/%s.tar.gz" % COMPILE_COMMANDS_VERSION,
)

load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")

hedron_compile_commands_setup()

http_archive(
    name = "rules_python",
    sha256 = "0a8003b044294d7840ac7d9d73eef05d6ceb682d7516781a4ec62eeb34702578",
    strip_prefix = "rules_python-0.24.0",
    url = "https://github.com/bazelbuild/rules_python/releases/download/0.24.0/rules_python-0.24.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3_11",
    python_version = "3.11",
)

load("@rules_python//python/pip_install:repositories.bzl", "pip_install_dependencies")

pip_install_dependencies()

load("@rules_python//python:pip.bzl", "pip_parse")
load("@python3_11//:defs.bzl", "interpreter")

pip_parse(
    name = "pip",
    python_interpreter_target = interpreter,
    requirements = "//python:requirements.txt",
)

load("@pip//:requirements.bzl", "install_deps")

install_deps()
