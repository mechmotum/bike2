load("@rules_cc//cc:defs.bzl", "cc_binary")

package(features = [
    "-asan",
    "-tsan",
    "-ubsan",
])

# Verify that the selected C++ toolchain provides std::expected
cc_binary(
    name = "std_expected_available",
    srcs = ["std_expected_available.cpp"],
)

alias(
    name = "gcc12",
    actual = "@gcc_12_toolchain//:toolchain",
)

alias(
    name = "gcc",
    actual = ":gcc12",
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

alias(
    name = "clang16",
    actual = select({
        "@platforms//os:macos": "@llvm_16_toolchain//:cc-toolchain-aarch64-darwin",
        ":linux_aarch64": "@llvm_16_toolchain//:cc-toolchain-aarch64-linux",
        ":linux_x86_64": "@llvm_16_toolchain//:cc-toolchain-x86_64-linux",
    }),
)

alias(
    name = "clang",
    actual = ":clang16",
)

# Doesn't work on MacOS: https://github.com/grailbio/bazel-toolchain/issues/192
linux_only = select({
    ":linux_aarch64": [],
    ":linux_x86_64": [],
    "//conditions:default": ["@platforms//:incompatible"],
})

linux_x86_64_only = select({
    ":linux_x86_64": [],
    "//conditions:default": ["@platforms//:incompatible"],
})

cc_binary(
    name = "asan_feature",
    srcs = ["asan_feature_available.cpp"],
    copts = ["-O0"],
    features = ["asan"],
    target_compatible_with = linux_x86_64_only,
)

sh_test(
    name = "asan_feature_available",
    timeout = "short",
    srcs = ["runtime_failure.sh"],
    args = [
        "$(location :asan_feature)",
        "ERROR: AddressSanitizer: stack-use-after-scope",
    ],
    data = [":asan_feature"],
)

cc_binary(
    name = "tsan_feature",
    srcs = ["tsan_feature_available.cpp"],
    features = ["tsan"],
    target_compatible_with = linux_only,
)

sh_test(
    name = "tsan_feature_available",
    timeout = "short",
    srcs = ["runtime_failure.sh"],
    args = [
        "$(location :tsan_feature)",
        "WARNING: ThreadSanitizer: data race",
    ],
    data = [":tsan_feature"],
)

cc_binary(
    name = "ubsan_feature",
    srcs = ["ubsan_feature_available.cpp"],
    copts = [
        "-O0",
        "-Wno-array-bounds",
    ],
    features = ["ubsan"],
    target_compatible_with = linux_only,
)

sh_test(
    name = "ubsan_feature_available",
    timeout = "short",
    srcs = ["runtime_failure.sh"],
    args = [
        "$(location :ubsan_feature)",
        "runtime error: index 10 out of bounds",
    ],
    data = [":ubsan_feature"],
)
